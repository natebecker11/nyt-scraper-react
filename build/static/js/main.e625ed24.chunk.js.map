{"version":3,"sources":["loading.gif","components/ArticleItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ArticleItem","props","react_default","a","createElement","target","rel","href","link","title","author","App","state","term","begin","end","articles","loading","handleInputChange","event","_event$target","name","value","_this","setState","Object","defineProperty","handleFormSubmit","console","log","axios","post","then","_ref","data","catch","x","_this2","this","className","htmlFor","id","type","onChange","e","onClick","style","display","alt","src","require","length","map","article","components_ArticleItem","assign","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e625ed24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.584b607f.gif\";","import React from 'react'\r\n\r\n\r\nconst ArticleItem = (props) => {\r\n  return (\r\n    <div>\r\n      <a target='_blank' rel='noopener noreferrer' href={props.link}><h3>{props.title}</h3></a>\r\n      <p>By: {props.author}</p>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\n\r\nexport default ArticleItem","import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport ArticleItem from './components/ArticleItem'\n\nclass App extends Component {\n\n  state = {\n    term: '',\n    begin: '',\n    end: '',\n    articles: [],\n    loading: false,\n  }\n\n  handleInputChange = event => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    console.log('sending...')\n    this.setState({ loading: true })\n    axios.post('/api/search/', this.state)\n      .then(({ data }) => {\n        console.log('recd')\n        console.log(data)\n        this.setState({ articles: data, loading: false })\n      })\n      .catch(x => console.log(x))\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>New York Times Article Scrubber</h1>\n          <h3>Search for and annotate articles of interest!</h3>\n        </header>\n        <section className='search-area'>\n          <h2>Search</h2>\n          <form>\n            <label htmlFor='searchTerm'> Topic\n              <input id='searchTerm' name='term' type='text' onChange={(e) => this.handleInputChange(e)} value={ this.state.term }/>\n            </label>\n            <label htmlFor='searchBegin'> Begin Date\n              <input id='searchBegin' name='begin' type='date' onChange={(e) => this.handleInputChange(e)} value={ this.state.begin }/>\n            </label>\n            <label htmlFor='searchEnd'> End Date\n              <input id='searchEnd' name='end' type='date' onChange={(e) => this.handleInputChange(e)} value={ this.state.end }/>\n            </label>\n            <button type='button' onClick={this.handleFormSubmit}> Submit </button>\n          </form>\n        </section>\n        <section className='loading-area' style={this.state.loading ? {} : {display: 'none'}}>\n          <img alt='Loading' src={ require('./loading.gif') }/>\n        </section>\n        <section className='results-area' style={this.state.articles.length > 0 ? {} : {display: 'none'}}>\n          <h2>Results</h2>\n          {this.state.articles.map(article => <ArticleItem key={article.link} {...article} />)}\n        </section>\n        <section className='saved-area'>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}